const TelegramBot = require('node-telegram-bot-api');
const { 
    extendedTaobaoItems, 
    searchItems, 
    getItemById, 
    getRandomItems, 
    getItemsByCategory, 
    getBestsellers 
} = require('./taobao-api');

const {
    DELIVERY_METHODS,
    ADDITIONAL_SERVICES,
    calculateDelivery,
    getAvailableDeliveryMethods,
    getRecommendedDeliveryMethod
} = require('./delivery-calculator');

const { 
    calculateDeliveryByAddress, 
    getSupportedCountries 
} = require('./geo-delivery-calculator');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = '8474179699:AAF0hwS1VTzlIyMjrF7Blqj_bRtpmVEKSdM'; // –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
const ADMIN_CHAT_ID = '5557326250'; // –í–∞—à Chat ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const MARKUP_PERCENTAGE = 30; // 30% –Ω–∞—Ü–µ–Ω–∫–∞

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
let userSessions = {}; // {userId: {cart: [], step: '', data: {}}}
let userOrders = {}; // {orderId: {...}}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
function getUserSession(userId) {
    if (!userSessions[userId]) {
        userSessions[userId] = {
            cart: [],
            step: 'main',
            data: {},
            total: 0
        };
    }
    return userSessions[userId];
}

function clearCart(userId) {
    const session = getUserSession(userId);
    session.cart = [];
    session.total = 0;
    updateCartTotal(userId);
}

function addToCart(userId, item, size = 'M', quantity = 1) {
    const session = getUserSession(userId);
    const finalPrice = item.price * (1 + MARKUP_PERCENTAGE / 100);
    
    const existingItem = session.cart.find(cartItem => cartItem.id === item.id && cartItem.size === size);
    
    if (existingItem) {
        existingItem.quantity += quantity;
    } else {
        session.cart.push({
            id: item.id,
            title: item.title,
            price: item.price,
            finalPrice: finalPrice,
            category: item.category,
            seller: item.seller,
            quantity: quantity,
            size: size,
            weight: item.weight || 0.5
        });
    }
    
    updateCartTotal(userId);
    return session;
}

function removeFromCart(userId, itemId, size) {
    const session = getUserSession(userId);
    session.cart = session.cart.filter(item => !(item.id === itemId && item.size === size));
    updateCartTotal(userId);
    return session;
}

function updateCartTotal(userId) {
    const session = getUserSession(userId);
    session.total = session.cart.reduce((sum, item) => sum + (item.finalPrice * item.quantity), 0);
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥', 'üî• –•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂'],
            ['üõí –ö–æ—Ä–∑–∏–Ω–∞', 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
            ['‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const categoriesKeyboard = {
    reply_markup: {
        keyboard: [
            ['üëï –•—É–¥–∏', 'üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏'],
            ['üëî –§—É—Ç–±–æ–ª–∫–∏', 'üß• –ö—É—Ä—Ç–∫–∏'],
            ['üëñ –ë—Ä—é–∫–∏', 'üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const cartKeyboard = {
    reply_markup: {
        keyboard: [
            ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'],
            ['üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'],
            ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
    }
};

const sizesKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [
                { text: 'XS', callback_data: 'size_XS' },
                { text: 'S', callback_data: 'size_S' },
                { text: 'M', callback_data: 'size_M' }
            ],
            [
                { text: 'L', callback_data: 'size_L' },
                { text: 'XL', callback_data: 'size_XL' },
                { text: 'XXL', callback_data: 'size_XXL' }
            ]
        ]
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const firstName = msg.from.first_name || '–î—Ä—É–≥';
    
    bot.sendMessage(chatId, 
        `üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *GlobeWearZ*, ${firstName}!\\n\\n` +
        `*Premium Streetwear* –ø—Ä—è–º–æ –∏–∑ Taobao üî•\\n\\n` +
        `–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\\n` +
        `üëï –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ö—É–¥–∏ –∏ —Ñ—É—Ç–±–æ–ª–∫–∏\\n` +
        `üëü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏\\n` +
        `üß• –°—Ç–∏–ª—å–Ω—ã–µ –∫—É—Ä—Ç–∫–∏ –∏ –≤–µ—Ä—Ö–Ω—é—é –æ–¥–µ–∂–¥—É\\n` +
        `üéí –ú–æ–¥–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã\\n\\n` +
        `üíé *–ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞*\\n` +
        `üöö *–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É*\\n` +
        `üí∞ *–ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã*\\n\\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`,
        { 
            parse_mode: 'Markdown',
            ...mainKeyboard 
        }
    );
});

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const session = getUserSession(chatId);
    
    if (text === 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥') {
        bot.sendMessage(chatId, 
            'üõçÔ∏è *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤*\\n\\n' +
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', 
            { 
                parse_mode: 'Markdown',
                ...categoriesKeyboard 
            }
        );
        session.step = 'catalog';
    }
    
    else if (text === 'üî• –•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂') {
        showBestsellers(chatId);
    }
    
    else if (text === 'üõí –ö–æ—Ä–∑–∏–Ω–∞') {
        showCart(chatId);
    }
    
    else if (text === 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
        showUserOrders(chatId);
    }
    
    else if (text === '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è') {
        bot.sendMessage(chatId,
            `‚ÑπÔ∏è *–û GlobeWearZ*\\n\\n` +
            `üåç –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–µ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–π streetwear –æ–¥–µ–∂–¥—ã —Å –ø–ª–æ—â–∞–¥–∫–∏ Taobao\\n\\n` +
            `‚úÖ *–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\\n` +
            `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏\\n` +
            `‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞\\n` +
            `‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\\n` +
            `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7\\n` +
            `‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞\\n\\n` +
            `üíé –ù–∞—Ü–µ–Ω–∫–∞: +${MARKUP_PERCENTAGE}% –∫ —Ü–µ–Ω–µ —Ç–æ–≤–∞—Ä–∞\\n` +
            `üöö –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ`,
            { 
                parse_mode: 'Markdown',
                ...mainKeyboard 
            }
        );
    }
    
    else if (text === 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
        bot.sendMessage(chatId,
            `üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤*\\n\\n` +
            `–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!\\n\\n` +
            `üì± Telegram: @bg\\.m01k\\n` +
            `‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7\\n\\n` +
            `‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\\n` +
            `‚Ä¢ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: 10\\-30 –¥–Ω–µ–π\\n` +
            `‚Ä¢ –û–ø–ª–∞—Ç–∞: –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\\n` +
            `‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç: –í —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π\\n` +
            `‚Ä¢ –†–∞–∑–º–µ—Ä—ã: –ê–∑–∏–∞—Ç—Å–∫–∏–µ, –Ω–∞ —Ä–∞–∑–º–µ—Ä –º–µ–Ω—å—à–µ`,
            { 
                parse_mode: 'MarkdownV2',
                ...mainKeyboard 
            }
        );
    }
    
    else if (text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        session.step = 'main';
        bot.sendMessage(chatId, 
            'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
            mainKeyboard
        );
    }
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    else if (text === 'üëï –•—É–¥–∏') {
        showCategoryItems(chatId, 'hoodies', 'üëï –•—É–¥–∏');
    }
    else if (text === 'üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏') {
        showCategoryItems(chatId, 'sneakers', 'üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏');
    }
    else if (text === 'üëî –§—É—Ç–±–æ–ª–∫–∏') {
        showCategoryItems(chatId, 'tshirts', 'üëî –§—É—Ç–±–æ–ª–∫–∏');
    }
    else if (text === 'üß• –ö—É—Ä—Ç–∫–∏') {
        showCategoryItems(chatId, 'jackets', 'üß• –ö—É—Ä—Ç–∫–∏');
    }
    else if (text === 'üëñ –ë—Ä—é–∫–∏') {
        showCategoryItems(chatId, 'pants', 'üëñ –ë—Ä—é–∫–∏');
    }
    else if (text === 'üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã') {
        showCategoryItems(chatId, 'accessories', 'üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã');
    }
    
    // –ö–æ—Ä–∑–∏–Ω–∞
    else if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä') {
        bot.sendMessage(chatId, 
            'üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', 
            categoriesKeyboard
        );
    }
    
    else if (text === 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É') {
        clearCart(chatId);
        bot.sendMessage(chatId, 
            'üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!', 
            cartKeyboard
        );
    }
    
    else if (text === 'üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑') {
        if (session.cart.length === 0) {
            bot.sendMessage(chatId, 
                '‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.', 
                cartKeyboard
            );
        } else {
            startCheckout(chatId);
        }
    }
    
    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    else if (text && !text.startsWith('/') && !text.includes('üîô') && session.step === 'main') {
        searchProducts(chatId, text);
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function showCategoryItems(chatId, category, categoryName) {
    const items = getItemsByCategory(category);
    
    if (items.length === 0) {
        bot.sendMessage(chatId, 
            `‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.`,
            categoriesKeyboard
        );
        return;
    }
    
    bot.sendMessage(chatId, 
        `${categoryName}\\n\\n` +
        `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${items.length}`,
        { 
            parse_mode: 'Markdown',
            ...categoriesKeyboard 
        }
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
    const itemsToShow = items.slice(0, 10);
    itemsToShow.forEach((item, index) => {
        setTimeout(() => {
            showProductCard(chatId, item);
        }, index * 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã
function showBestsellers(chatId) {
    const bestsellers = getBestsellers();
    
    bot.sendMessage(chatId, 
        `üî• *–•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂*\\n\\n` +
        `–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:`,
        { 
            parse_mode: 'Markdown',
            ...mainKeyboard 
        }
    );
    
    bestsellers.forEach((item, index) => {
        setTimeout(() => {
            showProductCard(chatId, item);
        }, index * 150);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
function showProductCard(chatId, item) {
    const finalPrice = item.price * (1 + MARKUP_PERCENTAGE / 100);
    
    const productText = 
        `üõçÔ∏è *${item.title}*\\n\\n` +
        `üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü: ${item.seller}\\n` +
        `üí∞ –¶–µ–Ω–∞: ~$${item.price.toFixed(2)}~\\n` +
        `üíé **–ò—Ç–æ–≥–æ: $${finalPrice.toFixed(2)}**\\n\\n` +
        `üìù ${item.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`;
    
    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [
                    { text: 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_${item.id}` },
                    { text: 'üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `view_${item.id}` }
                ]
            ]
        }
    };
    
    bot.sendMessage(chatId, productText, { 
        parse_mode: 'Markdown',
        ...keyboard 
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const data = callbackQuery.data;
    const session = getUserSession(chatId);
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    if (data.startsWith('add_')) {
        const itemId = data.replace('add_', '');
        const item = getItemById(itemId);
        
        if (item) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
            bot.sendMessage(chatId, 
                `üëï –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\\n*${item.title}*`,
                { 
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: 'XS', callback_data: `addsize_${itemId}_XS` },
                                { text: 'S', callback_data: `addsize_${itemId}_S` },
                                { text: 'M', callback_data: `addsize_${itemId}_M` }
                            ],
                            [
                                { text: 'L', callback_data: `addsize_${itemId}_L` },
                                { text: 'XL', callback_data: `addsize_${itemId}_XL` },
                                { text: 'XXL', callback_data: `addsize_${itemId}_XXL` }
                            ]
                        ]
                    }
                }
            );
        }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ä–æ–º
    else if (data.startsWith('addsize_')) {
        const [, itemId, size] = data.split('_');
        const item = getItemById(itemId);
        
        if (item) {
            addToCart(chatId, item, size, 1);
            bot.answerCallbackQuery(callbackQuery.id, {
                text: `‚úÖ ${item.title} (${size}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`,
                show_alert: false
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.editMessageReplyMarkup(null, {
                chat_id: chatId,
                message_id: message.message_id
            });
        }
    }
    
    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
    else if (data.startsWith('view_')) {
        const itemId = data.replace('view_', '');
        const item = getItemById(itemId);
        
        if (item) {
            const finalPrice = item.price * (1 + MARKUP_PERCENTAGE / 100);
            
            const detailText = 
                `üìã *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\\n\\n` +
                `üõçÔ∏è **${item.title}**\\n\\n` +
                `üè™ **–ü—Ä–æ–¥–∞–≤–µ—Ü:** ${item.seller}\\n` +
                `üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${item.category}\\n` +
                `‚öñÔ∏è **–í–µ—Å:** ${item.weight || 0.5} –∫–≥\\n\\n` +
                `üí∞ **–¶–µ–Ω–∞ –Ω–∞ Taobao:** $${item.price.toFixed(2)}\\n` +
                `üíé **–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:** $${finalPrice.toFixed(2)}\\n` +
                `üìà **–ù–∞—Ü–µ–Ω–∫–∞:** +${MARKUP_PERCENTAGE}%\\n\\n` +
                `üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\\n${item.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\\n\\n` +
                `üöö –î–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ`;
            
            bot.sendMessage(chatId, detailText, { 
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_${item.id}` }]
                    ]
                }
            });
        }
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    else if (data.startsWith('remove_')) {
        const [, itemId, size] = data.split('_');
        removeFromCart(chatId, itemId, size);
        
        bot.answerCallbackQuery(callbackQuery.id, {
            text: 'üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
            show_alert: false
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        showCart(chatId);
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function showCart(chatId) {
    const session = getUserSession(chatId);
    
    if (session.cart.length === 0) {
        bot.sendMessage(chatId, 
            'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞*\\n\\n' +
            '–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!',
            { 
                parse_mode: 'Markdown',
                ...cartKeyboard 
            }
        );
        return;
    }
    
    let cartText = `üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞*\\n\\n`;
    let totalItems = 0;
    
    session.cart.forEach((item, index) => {
        totalItems += item.quantity;
        cartText += 
            `${index + 1}\\. **${item.title}**\\n` +
            `   üìè –†–∞–∑–º–µ—Ä: ${item.size}\\n` +
            `   üí∞ $${item.finalPrice.toFixed(2)} √ó ${item.quantity} = $${(item.finalPrice * item.quantity).toFixed(2)}\\n\\n`;
    });
    
    cartText += 
        `üì¶ **–¢–æ–≤–∞—Ä–æ–≤:** ${totalItems} —à—Ç\\.\\n` +
        `üí≥ **–ò—Ç–æ–≥–æ:** $${session.total.toFixed(2)}\\n\\n` +
        `üöö _–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞_`;
    
    // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    const cartButtons = [];
    session.cart.forEach((item) => {
        cartButtons.push([
            { 
                text: `üóëÔ∏è ${item.title} (${item.size})`, 
                callback_data: `remove_${item.id}_${item.size}` 
            }
        ]);
    });
    
    bot.sendMessage(chatId, cartText, {
        parse_mode: 'MarkdownV2',
        reply_markup: {
            inline_keyboard: cartButtons
        }
    });
    
    bot.sendMessage(chatId, 
        '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π:', 
        cartKeyboard
    );
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function searchProducts(chatId, query) {
    const items = searchItems(query);
    
    if (items.length === 0) {
        bot.sendMessage(chatId, 
            `‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\\n\\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é.`,
            { 
                parse_mode: 'Markdown',
                ...mainKeyboard 
            }
        );
        return;
    }
    
    bot.sendMessage(chatId, 
        `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"**\\n\\n` +
        `–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${items.length}`,
        { 
            parse_mode: 'Markdown',
            ...mainKeyboard 
        }
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ç–æ–≤–∞—Ä–æ–≤
    const itemsToShow = items.slice(0, 8);
    itemsToShow.forEach((item, index) => {
        setTimeout(() => {
            showProductCard(chatId, item);
        }, index * 100);
    });
}

// –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function startCheckout(chatId) {
    const session = getUserSession(chatId);
    session.step = 'checkout_name';
    
    bot.sendMessage(chatId, 
        `üöÄ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\\n\\n` +
        `üìã **–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:**\\n` +
        session.cart.map((item, index) => 
            `${index + 1}\\. ${item.title} \\(${item.size}\\) √ó ${item.quantity}`
        ).join('\\n') + '\\n\\n' +
        `üí∞ **–ò—Ç–æ–≥–æ:** $${session.total.toFixed(2)}\\n\\n` +
        `üë§ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\\. \\n\\n` +
        `–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?`,
        { 
            parse_mode: 'MarkdownV2',
            reply_markup: {
                keyboard: [
                    ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
                ],
                resize_keyboard: true
            }
        }
    );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function showUserOrders(chatId) {
    const orders = Object.values(userOrders).filter(order => order.userId === chatId);
    
    if (orders.length === 0) {
        bot.sendMessage(chatId, 
            'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\\n\\n' +
            '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ\\!',
            { 
                parse_mode: 'MarkdownV2',
                ...mainKeyboard 
            }
        );
        return;
    }
    
    bot.sendMessage(chatId, 
        `üìã *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã \\(${orders.length}\\)*`,
        { 
            parse_mode: 'MarkdownV2',
            ...mainKeyboard 
        }
    );
    
    orders.forEach((order, index) => {
        setTimeout(() => {
            const orderText = 
                `üì¶ **–ó–∞–∫–∞–∑ \\#${order.orderId}**\\n` +
                `üìÖ ${new Date(order.timestamp).toLocaleDateString('ru-RU')}\\n` +
                `üí∞ $${order.total.toFixed(2)}\\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${getStatusText(order.status)}`;
            
            bot.sendMessage(chatId, orderText, { 
                parse_mode: 'MarkdownV2'
            });
        }, index * 200);
    });
}

function getStatusEmoji(status) {
    const statusEmojis = {
        'pending': '‚è≥',
        'confirmed': '‚úÖ',
        'processing': 'üîÑ',
        'shipped': 'üöö',
        'delivered': 'üì¶',
        'cancelled': '‚ùå'
    };
    return statusEmojis[status] || '‚ùì';
}

function getStatusText(status) {
    const statusTexts = {
        'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
        'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    };
    return statusTexts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç—Ç–∞–ø–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const session = getUserSession(chatId);
    
    if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑') {
        session.step = 'main';
        bot.sendMessage(chatId, 
            '‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ',
            mainKeyboard
        );
        return;
    }
    
    // –≠—Ç–∞–ø—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if (session.step === 'checkout_name') {
        session.data.name = text;
        session.step = 'checkout_phone';
        
        bot.sendMessage(chatId, 
            `–û—Ç–ª–∏—á–Ω–æ, ${text}! üëã\\n\\n` +
            `üì± –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`,
            { 
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    keyboard: [
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }
    
    else if (session.step === 'checkout_phone') {
        session.data.phone = text;
        session.step = 'checkout_email';
        
        bot.sendMessage(chatId, 
            'üìß –£–∫–∞–∂–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }
    
    else if (session.step === 'checkout_email') {
        if (!text.includes('@')) {
            bot.sendMessage(chatId, 
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
                { parse_mode: 'MarkdownV2' }
            );
            return;
        }
        
        session.data.email = text;
        session.step = 'checkout_country';
        
        bot.sendMessage(chatId, 
            'üåç –í –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑?\\n\\n' +
            '–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–æ—Å—Å–∏—è, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω, –°–®–ê\\)',
            { 
                parse_mode: 'MarkdownV2',
                reply_markup: {
                    keyboard: [
                        ['üá∑üá∫ –†–æ—Å—Å–∏—è', 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω'],
                        ['üá∫üá∏ –°–®–ê', 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è'],
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }
    
    else if (session.step === 'checkout_country') {
        session.data.country = text.replace(/üá∑üá∫|üá∞üáø|üá∫üá∏|üá©üá™/g, '').trim();
        session.step = 'checkout_city';
        
        bot.sendMessage(chatId, 
            `üèôÔ∏è –í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å—Ç—Ä–∞–Ω–µ "${session.data.country}"?`,
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }
    
    else if (session.step === 'checkout_city') {
        session.data.city = text;
        session.step = 'checkout_address';
        
        bot.sendMessage(chatId, 
            'üè† –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\\n\\n' +
            '–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å',
            {
                reply_markup: {
                    keyboard: [
                        ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑']
                    ],
                    resize_keyboard: true
                }
            }
        );
    }
    
    else if (session.step === 'checkout_address') {
        session.data.address = text;
        session.step = 'main';
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        const orderId = 'TG' + Date.now().toString().slice(-6);
        const order = {
            orderId,
            userId: chatId,
            items: [...session.cart],
            customerInfo: {
                name: session.data.name,
                phone: session.data.phone,
                email: session.data.email,
                country: session.data.country,
                city: session.data.city,
                address: session.data.address
            },
            subtotal: session.total,
            total: session.total, // TODO: –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
            status: 'pending',
            timestamp: new Date().toISOString(),
            source: 'telegram'
        };
        
        userOrders[orderId] = order;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        const adminMessage = 
            `üî• *–ù–û–í–´–ô –ó–ê–ö–ê–ó TELEGRAM*\\n\\n` +
            `üì¶ **–ó–∞–∫–∞–∑:** \\#${orderId}\\n` +
            `üë§ **–ö–ª–∏–µ–Ω—Ç:** ${session.data.name}\\n` +
            `üì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${session.data.phone}\\n` +
            `üìß **Email:** ${session.data.email}\\n\\n` +
            `üåç **–ê–¥—Ä–µ—Å:**\\n` +
            `${session.data.country}, ${session.data.city}\\n` +
            `${session.data.address}\\n\\n` +
            `üõçÔ∏è **–¢–æ–≤–∞—Ä—ã:**\\n` +
            session.cart.map((item, index) => 
                `${index + 1}\\. ${item.title} \\(${item.size}\\) √ó ${item.quantity} = $${(item.finalPrice * item.quantity).toFixed(2)}`
            ).join('\\n') + '\\n\\n' +
            `üí∞ **–ò—Ç–æ–≥–æ:** $${session.total.toFixed(2)}\\n\\n` +
            `‚è∞ ${new Date().toLocaleString('ru-RU')}`;
        
        bot.sendMessage(ADMIN_CHAT_ID, adminMessage, { 
            parse_mode: 'MarkdownV2' 
        });
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        bot.sendMessage(chatId, 
            `‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω\\!*\\n\\n` +
            `üì¶ **–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** \\#${orderId}\\n` +
            `üí∞ **–°—É–º–º–∞:** $${session.total.toFixed(2)}\\n\\n` +
            `üìû **–ß—Ç–æ –¥–∞–ª—å—à–µ?**\\n` +
            `1\\. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\\n` +
            `2\\. –£—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏\\n` +
            `3\\. –†–∞—Å—Å—á–∏—Ç–∞–µ—Ç —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\\n` +
            `4\\. –ü—Ä–∏—à–ª–µ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã\\n\\n` +
            `üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ *GlobeWearZ*\\!`,
            { 
                parse_mode: 'MarkdownV2',
                ...mainKeyboard 
            }
        );
        
        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–∞–Ω–Ω—ã–µ
        clearCart(chatId);
        session.data = {};
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('ü§ñ GlobeWearZ Telegram Bot –∑–∞–ø—É—â–µ–Ω!');
console.log('üì± Bot Token:', BOT_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù');
console.log('üë®‚Äçüíº Admin Chat ID:', ADMIN_CHAT_ID);
console.log('üíé –ù–∞—Ü–µ–Ω–∫–∞:', MARKUP_PERCENTAGE + '%');
console.log('üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
});